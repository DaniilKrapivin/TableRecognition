class MainNetLoss(nn.Module):
    def __init__(self):
        super(TableNetLoss, self).__init__()
        self.bce = nn.BCEWithLogitsLoss()
    
    def forward(self, table_pred, table_gt, col_pred = None, col_gt = None, ):

        table_loss = self.bce(table_pred, table_gt)
        column_loss = self.bce(col_pred, col_gt)
        return table_loss, column_loss
        
        
        
def compute_metrics(ground_truth, prediction, threshold = 0.5):
    ground_truth = ground_truth.int()
    prediction = (torch.sigmoid(prediction) > threshold).int()
    
    TP = torch.sum(prediction[ground_truth==1]==1)
    TN = torch.sum(prediction[ground_truth==0]==0)
    FP = torch.sum(prediction[ground_truth==1]==0)
    FN = torch.sum(prediction[ground_truth==0]==1)

    acc = (TP + TN)/(TP + TN + FP+ FN)
    precision = TP /(FP + TP + 1e-4)
    recall = TP /(FN + TP + 1e-4)
    f1 = 2 * precision * recall / (precision + recall + 1e-4)

    metrics = {
        'acc': acc.item(),
        'precision':precision.item(),
        'recall': recall.item(),
        'f1': f1.item()
    }

    return metrics
        
        
def train_on_epoch(data_loader, model, optimizer, loss, scaler, threshold = 0.5):

    combined_loss = []
    table_loss, table_acc, table_precision, table_recall, table_f1 = [],[],[],[],[]
    col_loss, col_acc, col_precision, col_recall, col_f1 = [],[],[],[],[]

    loop = tqdm(data_loader, leave=True)
    
    for batch_idx, img_dict in enumerate(loop):
        image           = img_dict["image"].to(config.DEVICE)
        table_image     = img_dict["table_image"].to(config.DEVICE)
        column_image     = img_dict["column_image"].to(config.DEVICE)

        with torch.cuda.amp.autocast():
            table_out, column_out  = model(image)
            t_loss, c_loss = loss(table_out, table_image, column_out, column_image)
        table_loss.append(t_loss.item())
        col_loss.append(c_loss.item())
        combined_loss.append((t_loss + c_loss).item())

        optimizer.zero_grad()
        scaler.scale(t_loss + c_loss).backward()
        scaler.step(optimizer)
        scaler.update()

        mean_loss = sum(combined_loss) / len(combined_loss)
        loop.set_postfix(loss=mean_loss)

        cal_metrics_table = compute_metrics(table_image, table_out, threshold)
        cal_metrics_col = compute_metrics(column_image, column_out, threshold)

        table_f1.append(cal_metrics_table['f1'])
        table_precision.append(cal_metrics_table['precision'])
        table_acc.append(cal_metrics_table['acc'])
        table_recall.append(cal_metrics_table['recall'])
        col_f1.append(cal_metrics_col['f1'])
        col_acc.append(cal_metrics_col['acc'])
        col_precision.append(cal_metrics_col['precision'])
        col_recall.append(cal_metrics_col['recall'])

        metrics = {
        'combined_loss': np.mean(combined_loss),
        'table_loss': np.mean(table_loss),
        'column_loss': np.mean(col_loss),
        'table_f1': np.mean(table_f1),
        'col_f1': np.mean(col_f1),
        'table_precision': np.mean(table_precision),
        'col_precision': np.mean(col_precision),
        'table_recall': np.mean(table_recall),
        'col_recall': np.mean(col_recall),
        'table_acc': np.mean(table_acc),
        'col_acc': np.mean(col_acc)
        }

    return metrics
    
    
    
    
    
    
def test_on_epoch(data_loader, model, loss, threshold = 0.5):

    combined_loss = []
    table_loss, table_acc, table_precision, table_recall, table_f1 = [],[],[],[],[]
    col_loss, col_acc, col_precision, col_recall, col_f1 = [],[],[],[],[]
    
    model.eval()
    with torch.no_grad():
        loop = tqdm(data_loader, leave=True)
    
        for batch_idx, img_dict in enumerate(loop):
            image           = img_dict["image"].to(config.DEVICE)
            table_image     = img_dict["table_image"].to(config.DEVICE)
            column_image     = img_dict["column_image"].to(config.DEVICE)

            with torch.cuda.amp.autocast():
                table_out, column_out  = model(image)

                t_loss, c_loss = loss(table_out, table_image, column_out, column_image)
            table_loss.append(t_loss.item())
            col_loss.append(c_loss.item())
            combined_loss.append((t_loss + c_loss).item())

            mean_loss = sum(combined_loss) / len(combined_loss)
            loop.set_postfix(loss=mean_loss)

            
            cal_metrics_table = compute_metrics(table_image, table_out, threshold)
            cal_metrics_col = compute_metrics(column_image, column_out, threshold)


            table_f1.append(cal_metrics_table['f1'])
            table_precision.append(cal_metrics_table['precision'])
            table_acc.append(cal_metrics_table['acc'])
            table_recall.append(cal_metrics_table['recall'])
            col_f1.append(cal_metrics_col['f1'])
            col_acc.append(cal_metrics_col['acc'])
            col_precision.append(cal_metrics_col['precision'])
            col_recall.append(cal_metrics_col['recall'])

        

    metrics = {
        'combined_loss': np.mean(combined_loss),
        'table_loss': np.mean(table_loss),
        'column_loss': np.mean(col_loss),
        'table_f1': np.mean(table_f1),
        'col_f1': np.mean(col_f1),
        'table_precision': np.mean(table_precision),
        'col_precision': np.mean(col_precision),
        'table_recall': np.mean(table_recall),
        'col_recall': np.mean(col_recall),
        'table_acc': np.mean(table_acc),
        'col_acc': np.mean(col_acc)
    }

    model.train()
    return metrics
